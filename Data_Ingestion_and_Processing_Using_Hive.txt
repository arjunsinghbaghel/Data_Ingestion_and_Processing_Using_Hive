-- ****** Data Ingestion and Processing-Case Study *******



-- *** Title: The New York Taxi and Limousine Commission [TLC] Analysis ****
-- Brief: This assignment is centered on the concepts of Data Ingesting and Analyzing Big Data on the APACHE-HIVE platform.
-- The dataset provided contains trip details made by taxis in New York City.
-- Our analysis is focused on the yellow taxis for the months of November and December 2017.
-- ---------------------------------------------------------------------------------------------
-- *** Data Dictionary ******
-- The Data Dictionary for this dataset is as follows: [Field Name--Description]
-- [1] vendorid--A code indicating the TPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc. 
-- [2] tpep_pickup_timestamp--The date and time when the meter was engaged.
-- [3] tpep_dropoff_timestamp--The date and time when the meter was disengaged.
-- [4] passenger_count--The number of passengers in the vehicle. This is a driver-entered value.
-- [5] trip_distance--The elapsed trip distance in miles reported by the taximeter.
-- [6] rate_code--The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride.
-- [7] store_forward_flag--This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka store and forward, because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip.
-- [8] pickup_location--TLC Taxi Zone in which the taximeter was engaged.
-- [9] dropoff_location--TLC Taxi Zone in which the taximeter was disengaged.
-- [10] payment_type--A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip.
-- [11] fare_charge--The time-and-distance fare calculated by the meter.
-- [12] extra_charge--Miscellaneous extras and surcharges.  Currently, this only includes the $0.50 and $1 rush hour and overnight charges.
-- [13] mta_tax_charge--$0.50 MTA tax that is automatically triggered based on the metered rate in use.
-- [14] tip_amount--Tip amount â€“ This field is automatically populated for credit card tips. Cash tips are not included.
-- [15] tolls_charge--Total amount of all tolls paid in trip.
-- [16] improvement_surcharge--$0.30 improvement surcharge assessed trips at the flag drop. The improvement surcharge began being levied in 2015.
-- [17] total_charge--The total amount charged to passengers. It does not include cash tips.
-- ----------------------------------------------------------------------------------------------------







-- 1.******* Pre-requisite ********
ADD JAR /opt/cloudera/parcels/CDH/lib/hive/lib/hive-hcatalog-core-1.1.0-cdh5.11.2.jar;

SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- 2.******* creating workspace *********

drop database if exists arjun_texi_assignment CASCADE;
Create database if not exists  arjun_texi_assignment;
use  arjun_texi_assignment;

-- 3.********Loading data **********

drop  table if exists arjun_texi_assignment.nyc_texi_data; 

create external table if not exists arjun_texi_assignment.nyc_texi_data(
VendorID int,
tpep_pickup_datetime timestamp,
tpep_dropoff_datetime timestamp,
passenger_count int,
trip_distance double,
RatecodeID int,
store_and_fwd_flag string,
PULocationID int,
DOLocationID int,
payment_type int,
fare_amount double,
extra double,
mta_tax double,
tip_amount double,
tolls_amount double,
improvement_surcharge double,
total_amount double
)

ROW FORMAT DELIMITED FIELDS TERMINATED BY ','
STORED AS TEXTFILE
LOCATION '/common_folder/nyc_taxi_data/'
tblproperties ("skip.header.line.count"="1"); 

-- querying table for validation
select * from arjun_texi_assignment.nyc_texi_data NTD;
select count(*) from arjun_texi_assignment.nyc_texi_data NTD;
-- 1174569 records 




-- ******* Basic Data Quality Checks *******

-- 1: How many records has each TPEP provider provided? Write a query that summarises the number of records of each provider.
select vendorid,count(*) from arjun_texi_assignment.nyc_texi_data NTD
group by vendorid;
-- Result

-- vendorid      _c1
--   1          527386
--   2          647183


select 527386/1174569;
-- vendorid 1 having 45% of data

select 647183/1174569;
-- vendorid 2 having 55% of data


-- ----- check for empty cells ------
select sum(case when 	VendorID 	     is null then 1 else 0 end) 	VendorID,
sum(case when 	tpep_pickup_datetime 	 is null then 1 else 0 end) 	tpep_pickup_datetime ,
sum(case when 	tpep_dropoff_datetime 	 is null then 1 else 0 end) 	tpep_dropoff_datetime,
sum(case when 	passenger_count 	     is null then 1 else 0 end) 	passenger_count,
sum(case when 	trip_distance 	         is null then 1 else 0 end) 	trip_distance,
sum(case when 	RatecodeID 	             is null then 1 else 0 end) 	RatecodeID,
sum(case when 	store_and_fwd_flag 	     is null then 1 else 0 end) 	store_and_fwd_flag,
sum(case when 	PULocationID 	         is null then 1 else 0 end) 	PULocationID,
sum(case when 	DOLocationID 	         is null then 1 else 0 end) 	DOLocationID,
sum(case when 	payment_type 	         is null then 1 else 0 end) 	payment_type,
sum(case when 	fare_amount 	         is null then 1 else 0 end) 	fare_amount,
sum(case when 	extra 	                 is null then 1 else 0 end) 	extra,
sum(case when 	mta_tax 	             is null then 1 else 0 end) 	mta_tax,
sum(case when 	tip_amount 	             is null then 1 else 0 end) 	tip_amount,
sum(case when 	tolls_amount 	         is null then 1 else 0 end) 	tolls_amount,
sum(case when 	improvement_surcharge 	 is null then 1 else 0 end) 	improvement_surcharge,
sum(case when 	total_amount 	         is null then 1 else 0 end) 	total_amount 	
from arjun_texi_assignment.nyc_texi_data NTD;
-- all zero's


-- ----- range of data ------

select max(VendorID) max_VendorID,	                    min(VendorID ) min_VendorID,
max(tpep_pickup_datetime) max_tpep_pickup_datetime	,	min(tpep_pickup_datetime) min_tpep_pickup_datetime,
max(tpep_dropoff_datetime) max_tpep_dropoff_datetime,	min(tpep_dropoff_datetime) min_tpep_dropoff_datetime,
max(passenger_count) max_passenger_count,	            min(passenger_count) min_passenger_count,
max(trip_distance) max_trip_distance,              	    min(trip_distance) min_trip_distance,
max(RatecodeID) max_RatecodeID,	                        min(RatecodeID) min_RatecodeID,
max(store_and_fwd_flag) max_store_and_fwd_flag,	        min(store_and_fwd_flag) min_store_and_fwd_flag,
max(PULocationID) max_PULocationID,                	    min(PULocationID) min_PULocationID,
max(DOLocationID) max_DOLocationID,                	    min(DOLocationID) min_DOLocationID,
max(payment_type) max_payment_type,                	    min(payment_type) min_payment_type,
max(fare_amount) max_fare_amount,                  	    min(fare_amount) min_fare_amount,
max(extra) max_extra,                              	    min(extra) min_extra,
max(mta_tax) max_mta_tax,                          	    min(mta_tax) min_mta_tax,
max(tip_amount) max_tip_amount,                    	    min(tip_amount) min_tip_amount,
max(tolls_amount) max_tolls_amount,                	    min(tolls_amount) min_tolls_amount,
max(improvement_surcharge) max_improvement_surcharge,	min(improvement_surcharge) min_improvement_surcharge,
max(total_amount) max_total_amount,                	    min(total_amount) min_total_amount		
from arjun_texi_assignment.nyc_texi_data NTD;


-- max_vendorid	2
-- min_vendorid	1
-- max_tpep_pickup_datetime	2018-01-01 00:04:00.0
-- min_tpep_pickup_datetime	2003-01-01 00:58:00.0
-- max_tpep_dropoff_datetime	2019-04-24 19:21:00.0
-- min_tpep_dropoff_datetime	2003-01-01 01:28:00.0
-- max_passenger_count	9
-- min_passenger_count	0
-- max_trip_distance	126.41
-- min_trip_distance	0
-- max_ratecodeid	99
-- min_ratecodeid	1
-- max_store_and_fwd_flag	Y
-- min_store_and_fwd_flag	N
-- max_pulocationid	265
-- min_pulocationid	1
-- max_dolocationid	265
-- min_dolocationid	1
-- max_payment_type	4
-- min_payment_type	1
-- max_fare_amount	650
-- min_fare_amount	-200
-- max_extra	4.8
-- min_extra	-10.6
-- max_mta_tax	11.4
-- min_mta_tax	-0.5
-- max_tip_amount	450
-- min_tip_amount	-1.16
-- max_tolls_amount	895.89
-- min_tolls_amount	-5.76
-- max_improvement_surcharge	1
-- min_improvement_surcharge	-0.3
-- max_total_amount	928.19
-- min_total_amount	-200.8
--  --------------------------------------------
-- column which seems to match the data disctionary 
-- pulocationid,dolocationid:- pickup and drop location are raning from 1 to 265
-- payment_type in data is spread between 1-4 which is with provided values of 1-6 

-- columns that are not matching data dictionary
-- Checking for remaining individual columns based on their range and metada provided 

-- vendorid is fine, values between two provider of 1 & 2

 
 
 
 
--  2: The data provided is for months November and December only. Check whether the data is consistent, and if not, 
    -- identify the data quality issues. Mention all data quality issues in comments.

-- ------------- tpep_pickup_datetime ------------------
-- the data is for two months Nov 2017 & Dec 2017
-- any day before 1-nov-2017 and after 31-dec-2017(represent as >= 1-jan-2018) is out of context

select count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where NTD.tpep_pickup_datetime < '2017-11-1 00:00:00.0' or tpep_pickup_datetime>='2018-01-01 00:00:00.0';
-- 14 records are not in the range


select  vendorid, count(*)from  arjun_texi_assignment.nyc_texi_data NTD 
where NTD.tpep_pickup_datetime < '2017-11-1 00:00:00.0' or tpep_pickup_datetime>='2018-01-01 00:00:00.0'
group by vendorid;
-- seems vendor 2 is at fault.
--  2	14


--  ----------------- tpep_dropoff_datetime ---------------
-- The drop may have happened the next day hence the drop time is allowed to be till 1 jan 2018(represent as >= 2-jan-2018)
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where NTD.tpep_dropoff_datetime < '2017-11-1 00:00:00.0' or tpep_dropoff_datetime>='2018-01-02 00:00:00.0';
-- 7 records in total are not in range

select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where NTD.tpep_dropoff_datetime < '2017-11-1 00:00:00.0' or tpep_dropoff_datetime>='2018-01-02 00:00:00.0'
group by vendorid;
-- vendor 1 has 1 records
-- vendor 2 has 6 records

-- we will evaluate vendor 1 a lil more in details, since it has only one records
select * from  arjun_texi_assignment.nyc_texi_data NTD 
where (NTD.tpep_dropoff_datetime < '2017-11-1 00:00:00.0' or tpep_dropoff_datetime>='2018-01-02 00:00:00.0')
and vendorid=1;
-- seems like the data is corrupt one record ending far in future(2019)

-- drop of time can't be greater or equal too pick up time
select count(*) from arjun_texi_assignment.nyc_texi_data NTD 
where NTD.tpep_dropoff_datetime<=NTD.tpep_pickup_datetime;
-- 6555

select 6555/ 1174569;
-- 0.0055,a smaller set of records can be deleted/ignored

select vendorid, count(*) from arjun_texi_assignment.nyc_texi_data NTD  
where NTD.tpep_dropoff_datetime<=NTD.tpep_pickup_datetime
group by vendorid;
-- 1	3492
-- 2	3063

-- Vendor 1 seems to be at fault lets evaluate few of its records
select * from arjun_texi_assignment.nyc_texi_data NTD 
where NTD.tpep_dropoff_datetime<=NTD.tpep_pickup_datetime and vendorid=1;
-- well location id's for pick up and drop are changing and the billing seems to be different everytime
-- But since we can't be sure of what actual event took place and teh record set is small
-- we will ignore the records

-- ---------------------- passenger_count ---------------------
select passenger_count, count(*) from  arjun_texi_assignment.nyc_texi_data NTD  group by passenger_count;
-- 0	6824
-- 2	176872
-- 4	24951
-- 6	33146
-- 8	3
-- 1	827499
-- 3	50693
-- 5	54568
-- 7	12
-- 9	1

select 6824/1174569;
--0.005 %
-- 0 again seems like an disinterested driver not putting in details, or an empty parcel being sent in teh cab

-- Lets see which vendor is at fault here
select vendorid,passenger_count, count(*) 
from  arjun_texi_assignment.nyc_texi_data NTD 
where passenger_count in  (0,7,8,9) group by vendorid,passenger_count
order by passenger_count,vendorid;

-- vendorid	passenger_count	_c2
-- 	1	        0	        6813
-- 	2	        0	        11
-- 	1	        7	        1
-- 	2	        7	        11
-- 	2	        8	        3
-- 	2	        9	        1

-- Vendor 1 seems to be at fault w.r.t 0 passenger_count


-- ------------------- trip_distance ----------------------

-- The elapsed trip distance in miles reported by the taximeter.
select  count(*) from  arjun_texi_assignment.nyc_texi_data NTD where trip_distance<=0;
-- 7402

select 7402/1174569;
-- 0.006301886053522611
-- we will ignore this data
select  vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD where trip_distance<=0 group by vendorid;
-- 1 	4217
-- 2    3185
-- Both vendor seems to be equally responsible for this


-- ------------------------- ratecodeid --------------------------
select  ratecodeid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD group by ratecodeid;

-- ratecodeid	_c1
--      2	    25338
-- 	    4	    586
-- 	    6	    3
-- 	    1	    1142278
-- 	    3	    2562
-- 	    5	    3793
--      99	    9
-- 1-6 are valid id as per teh metadata, and 99 value based 9 records are incorrect 
-- we will ignore the 9 records

-- vendorid wise analysis
select vendorid , count(*) 
from  arjun_texi_assignment.nyc_texi_data NTD
where ratecodeid=99
group by vendorid;

-- vendorid	_c1
-- 	 2	     1
-- 	 1	     8
-- Vendor 1 is the mazor contributor towards this data discripency


-- --------------------------- store_and_fwd_flag --------------------------
select  store_and_fwd_flag,count(*) from  arjun_texi_assignment.nyc_texi_data NTD group by store_and_fwd_flag;
-- store_and_fwd_flag	 _c1
-- 	    N	            1170618
-- 	    Y	            3951


-- The time-and-distance fare calculated by the meter.

select percentile_approx(fare_amount,array(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99)) 
from  arjun_texi_assignment.nyc_texi_data NTD;
-- [4.9,5.9,6.9,7.9,9.3,10.9,12.9,16.8,24.8,51.9]

-- these values are acceptable lets tru a smaller percentile value
select percentile_approx(fare_amount,array(0.1,0.999))
from  arjun_texi_assignment.nyc_texi_data NTD;
-- [4.9,88.1]
-- even these values are within range
-- seems like the negative values and very high values are wrong data or outliner.
-- we can easily ignore negative values
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where fare_amount<0;
-- 558 negative values

--  lets find a upper limit for these fare values
select count(*)
from  arjun_texi_assignment.nyc_texi_data NTD where fare_amount>100;
-- 770

-- let's try a bigger number
select *
from  arjun_texi_assignment.nyc_texi_data NTD where fare_amount>1000;
-- 0 records fall in this category

-- ---------------------- extra --------------------------------
-- Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges.
-- hence we will reject these values let's verify their count
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where extra not in (0,0.5,1);
-- 4856
select 4856/1174569;
-- 0.004134 this data can be safely ignored
select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD where extra not in (0,0.5,1)
group by vendorid;

-- vendorid	  _c1
-- 	  2   	  3033
-- 	  1	      1823

-- both vendro seems to at fault
-- may be the understanding w.r.t these extra column is missing 
-- as these are the only column where vendor 1 is also looking malicious


-- ---------------------- mta_tax ------------------------------
-- $0.50 MTA tax that is automatically triggered based on the metered rate in use.
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where mta_tax not in (0,0.5);
-- 548

select 548/1174569;
--0.00046655411474336546 smaller set, based on data disctionary we would ignore these

select vendorid,count(*) from arjun_texi_assignment.nyc_texi_data NTD 
where mta_tax not in (0,0.5) group by vendorid;
-- vendorid	_c1
-- 	 2	    547
-- 	 1	    1
-- Vendor 2 is again mazorly at fault


-- ------------------------ improvement_surcharge ------------------
--  $0.30 improvement surcharge assessed trips at the flag drop. 
-- The improvement surcharge began being levied in 2015. 
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where improvement_surcharge not in (0,0.3);
-- only 562  can be easily ignored
-- vendor wise
select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where improvement_surcharge not in (0,0.3) 
group by vendorid;
-- vendorid	_c1
-- 	 2	    562
-- All records belong to vendor 2



-- ----------------------------- tip_amount ------------------------
-- Tip amount â€“ This field is automatically populated for credit card tips. Cash tips are not included.
--negative values
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where tip_amount <0;
-- 4

select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where tip_amount <0 group by vendorid;
-- vendorid	_c1
-- 	 2	     4
-- all belong to vendor 2

-- Let's chek if their are non credit card based tips
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where Payment_type!=1 and tip_amount>0;
-- 17 records have payment mode other than credit and still have tip amount greate than 0
-- we will ignore these records to sanity as well.

select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD
where Payment_type!=1 and tip_amount>0  group by vendorid;
-- vendorid	 _c1
-- 	  1	      17
-- All records belong to vendor 1
-- we will remove these records as well


-- ----------------------- tolls_amount ------------------
-- Total amount of all tolls paid in trip. 
-- The value can't be negative
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where tolls_amount <0;
-- only 3 records can be safely ignored

select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where tolls_amount <0
group by vendorid;
-- vendorid	  _c1
-- 	  2	       3
-- All vendor 2


-- ------------------------- total_amount ----------------------
-- The total amount charged to passengers. Does not include cash tips
-- can be negative and has similar high value as fare_amount, we will check this with similar queries
select count(*) from  arjun_texi_assignment.nyc_texi_data NTD where total_amount<0;
-- 558 can be easily ignored

-- Higehr value check
select * from  arjun_texi_assignment.nyc_texi_data NTD where total_amount>1000;
-- 0 record 

-- vendor wise
select vendorid,count(*) from  arjun_texi_assignment.nyc_texi_data NTD 
where total_amount>1000 or total_amount<0 
group by vendorid;
-- vendorid	_c1
-- 	 2	    558
-- Group 2 highly dominate in the corrupt data section






-- 3: You might have encountered unusual or erroneous rows in the dataset. 
    --Can you conclude which vendor is doing a bad job in providing the records using different columns of the dataset? 
    --Summarise your conclusions based on every column where these errors are present. 
    --For example,  There are unusual passenger count, i.e. 0 which is unusual.
    
-- For the data It's mostly vendor 2 that is providing faulty data.
-- Below is teh list of problemtic data they have provided column wise
-- invalid values for 1.total_amount , 2.improvement_surcharge,3.tolls_amount, 4.tip_amount,mta_tax, 5.fare_amount,
                    --6.passenger_count, 7.pickup and 8.drop off time
-- For the column extra both vendor seems to be equally at fault
-- Vendor 1 for has few tip amount where the payment mode is not credit card
-- But overall Vendor 2 is definately not providing correct data.

-- Create a clean, ORC partitioned table for analysis.
-- Remove all the erroneous rows.

-- We will be partinening on the month column first as we need to answer question comparing between the two
-- since we expect only two month data to pass from out filters year is not an any use in partionening

-- Our secondarly partition is based on Vendor , although the question don't call for this one
-- In general if we were analysing this data freely we would still want the partitionening to be done this way

drop table if exists arjun_texi_assignment.ParOrc_nyc_texi_data;

Create external table if not exists arjun_texi_assignment.ParOrc_nyc_texi_data(
VendorID int,
tpep_pickup_datetime timestamp,
tpep_dropoff_datetime timestamp,
passenger_count int,
trip_distance double,
RatecodeID int,
store_and_fwd_flag string,
PULocationID int,
DOLocationID int,
payment_type int,
fare_amount double,
extra double,
mta_tax double,
tip_amount double,
tolls_amount double,
improvement_surcharge double,
total_amount double
)
partitioned by (yr int, Mnth int)
stored as orc location '/user/hive/warehouse/Arjun_NYCTAXI_Assignment'
tblproperties ("orc.compress"="SNAPPY");


-- set dynamic partitions
SET hive.exec.max.dynamic.partitions=100000;
SET hive.exec.max.dynamic.partitions.pernode=100000;

-- Posting data
-- Writing the data from external table nyc_texi_data to ParOrc_nyc_texi_data
insert overwrite table arjun_texi_assignment.ParOrc_nyc_texi_data partition(yr, Mnth)
select VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance,
RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, 
tip_amount, tolls_amount, improvement_surcharge, total_amount,
year(tpep_pickup_datetime) as yr, month(tpep_pickup_datetime) as mnth
from arjun_texi_assignment.nyc_texi_data 
where passenger_count not in(0, 192) and trip_distance > 0 
and RatecodeID != 99 and fare_amount > 0 and extra >= 0 
and mta_tax in (0,0.5) and tip_amount >= 0
and tolls_amount >= 0 and improvement_surcharge = 0.30 
and total_amount >= 0 and year(tpep_pickup_datetime) = 2017 and month(tpep_pickup_datetime) in (11,12);

-- Running the query to check all records 
select * from arjun_texi_assignment.ParOrc_nyc_texi_data limit 10;

-- Checking total rows; 
select count(*) from arjun_texi_assignment.ParOrc_nyc_texi_data;
-- 1159746 total rows

-- Counting the number of rows in which any column has NULL values
select count(*) as Total_NULL_records from arjun_texi_assignment.ParOrc_nyc_texi_data
where VendorID is null 
or tpep_pickup_datetime is null
or tpep_dropoff_datetime is null
or passenger_count is null
or trip_distance is null
or RatecodeID is null
or store_and_fwd_flag is null
or PULocationID is null
or DOLocationID is null
or payment_type is null
or fare_amount is null
or extra is null
or mta_tax is null
or tip_amount is null
or tolls_amount is null
or improvement_surcharge is null
or total_amount is null
or yr is null
or Mnth is null;

-- No NULL value




-- *********** Analysis-I *************


-- 1: Compare the overall average fare per trip for November and December.
select round(avg(fare_amount),2) as Avg_Fareamount, Mnth as Month from arjun_texi_assignment.ParOrc_nyc_texi_data 
group by mnth;
-- avg_fareamount	month
-- 	    13.06	     11(November)
-- 	    12.85	     12(December)




-- 2: Explore the â€˜number of passengers per tripâ€™ - how many trips are made by each level of â€˜Passenger_countâ€™? 
    --Do most people travel solo or with other people?
select passenger_count,round((count(*)*100/1159746),4) cnt
from arjun_texi_assignment.ParOrc_nyc_texi_data  group by passenger_count

-- passenger_count	    cnt
-- 	    1	           70.814
-- 	    2	           15.162
-- 	    3	           4.3503
-- 	    4	           2.1392
-- 	    5	           4.6857
-- 	    6	           2.8486
-- 	    7	           0.0003
-- Above statistics shows that most of the passengers prefer to travel Solo
-- Solo rides are most common , dominant infact with almost 71% od data belonging to them
-- Dual rides are teh conly other significant category with 15% occupancy
-- Rest all are marfinal below 5 %



-- 3: Which is the most preferred mode of payment?

select payment_type,round((count(*)*100/1159746),4) cnt
from arjun_texi_assignment.ParOrc_nyc_texi_data  group by payment_type
order by cnt desc;

-- payment_type	      cnt
-- 	    1	        67.4978 Credit card
-- 	    2	        31.9753 cash
-- 	    3	        0.4124  No charge
-- 	    4	        0.1145  Dispute

-- Credit card pays are dominant with 67.4978% and cash payment are 2nd highest paymnet 32%
-- rest all modes are negligable




-- 4: What is the average tip paid per trip? Compare the average tip with the 25th, 
    -- 50th and 75th percentiles and comment whether the â€˜average tipâ€™ is a representative statistic (of the central tendency) of â€˜tip amount paidâ€™. 
    -- Hint: You may use percentile_approx(DOUBLE col, p): Returns an approximate pth percentile of a numeric 
    -- column (including floating point types) in the group.

-- average tip paid per trip  
select round(avg(tip_amount),2)  
from arjun_texi_assignment.ParOrc_nyc_texi_data;
-- 	1.85

select percentile_approx(tip_amount,array(0.25,0.50,0.75))  
from arjun_texi_assignment.ParOrc_nyc_texi_data;
--  25%  50%   75%
-- [0.0,1.36,2.450023769574944]

-- From the %centile values we can see that data is skewed towards teh higher side.
-- Above Statistics shows that the average tip paid per trip is not representative of central tendency 
-- 25% or more values bein zero tip do play a high part in this behaviour
-- again the median 1.36 is much lower then the avg 1.82 due to the skewness towards higher values
-- Hence mean is not representative statistic of centeral tendency here.
-- It woudl be advised to use median instead of mean for this particular column during analysis






-- 5: Explore the â€˜Extraâ€™ (charge) variable - what fraction of total trips have an extra charge is levied?

select extra,round((count(*)*100/1159746),4) cnt from (
select case when extra>0 then 1 else 0 end  extra
from arjun_texi_assignment.ParOrc_nyc_texi_data ) T
group by extra
order by cnt desc

-- extra	  cnt
--  0	    53.6672
-- 	1	    46.3328

-- Above Statistics shows that below statistics:
-- Extra Charge Applied - 46.3328 %
-- Extra Charge not Applied - 53.6672 %







-- *************** Analysis-II **************

-- 1: What is the correlation between the number of passengers on any given trip, and the tip paid per trip? 
    --Do multiple travellers tip more compared to solo travellers? Hint: Use CORR(Col_1, Col_2)
    
select round(corr(passenger_count, tip_amount),4) from arjun_texi_assignment.ParOrc_nyc_texi_data;
-- -0.005
-- the value is fairly small and also negative corelation.

select round(corr(is_solo, tip_amount),4) from 
(select case when passenger_count=1 then 1 else 0 end is_solo,tip_amount 
from arjun_texi_assignment.ParOrc_nyc_texi_data ) T;
-- 0.0054 comparing only single vs multiple rider count their is still very low co-relation

select is_solo,round(avg(tip_amount),4) from 
(select case when passenger_count=1 then 1 else 0 end is_solo,tip_amount 
from arjun_texi_assignment.ParOrc_nyc_texi_data ) T group by is_solo;

-- is_solo	 _c1
-- 	 0	    1.8277
-- 	 1	    1.8575

-- Values are almost same




-- 2: Segregate the data into five segments of â€˜tip paidâ€™: [0-5), [5-10), [10-15) , [15-20) and >=20. 
    --Calculate the percentage share of each bucket (i.e. the fraction of trips falling in each bucket).
    
select Tip_range, round((count(*)*100/1159746),4) cnt
from (select
case when (tip_amount>=0 and tip_amount<5)   then '[0-5)' 
     when (tip_amount>=5 and tip_amount<10)  then '[5-10)' 
     when (tip_amount>=10 and tip_amount<15) then '[10-15)'
     when (tip_amount>=15 and tip_amount<20) then '[15-20)'
     when (tip_amount>=20)                   then '>=20' end Tip_range
     from arjun_texi_assignment.ParOrc_nyc_texi_data) T 
     group by Tip_range
     order by cnt desc;

-- tip_range	 cnt
-- 	 [0-5)	    92.178
-- 	 [5-10)	    5.6576
-- 	 [10-15)	1.8461
-- 	 [15-20)	0.2265
-- 	 >=20	    0.0917

-- 0-5 range is the most prominate group with 92.178% records, we already know 25%+ of these are 0 values from teh precious percentile based check
-- 5-10 represening a small fraction of 5.6576%.






-- 3): Which month has a greater average â€˜speedâ€™ - November or December? 
    --Note that the variable â€˜speedâ€™ will have to be derived from other metrics. 
    --Hint: You have columns for distance and time.
    
select Mnth , round(avg(trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime) )/3600) ),2) avg_speed
from arjun_texi_assignment.ParOrc_nyc_texi_data
group by Mnth
order by avg_speed desc;

-- mnth	  avg_speed
-- 	12	    11.09
-- 	11	    11
-- December month is marginally faster by 0.09 miles/hour.




-- 4: Analyse the average speed of the most happening days of the year, 
    --i.e. 31st December (New yearâ€™s eve) and 25th December (Christmas) and compare it with the overall average. 
    
SELECT round(avg(CASE when mnth=12 and day(tpep_pickup_datetime)=25 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3)as ChristmasEve_Average_Speed_MPH,
round(avg(CASE when mnth=12 and day(tpep_pickup_datetime)=31 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3)as NewYearEve_Average_Speed_MPH,
round(avg(CASE when mnth in (11,12) THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3)as Overall_Average_Speed_MPH,
round(round(avg(CASE when mnth=12 and day(tpep_pickup_datetime)=25 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3) - round(avg(CASE when mnth in (11,12) THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3),3) as ChristmasEve_minus_Overall_Avg_Speed_MPH, 
round(round(avg(CASE when mnth=12 and day(tpep_pickup_datetime)=31 THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3) - round(avg(CASE when mnth in (11,12) THEN (trip_distance/((unix_timestamp(tpep_dropoff_datetime)-unix_timestamp(tpep_pickup_datetime))/3600)) ELSE null end),3),3) as NewYearEve_minus_Overall_Avg_Speed_MPH
from arjun_texi_assignment.ParOrc_nyc_texi_data;
    
-- christmaseve_average_speed_mph	newyeareve_average_speed_mph	overall_average_speed_mph	christmaseve_minus_overall_avg_speed_mph	newyeareve_minus_overall_avg_speed_mph
-- 	        15.265	                            13.244	                        11.047	                        4.218                                      2.197

--Overall Average Speed for November and December Combined: 11.047 MPH

--1. Average Speed Statistics of Christmas Eve (25th December)
--Average Speed on Christmas Eve: 15.265 MPH
--Speed greater than Overall Avg: 4.218 MPH
--Percentage greater than Overall Avg: + 38.18%

--2. Average Speed Statistics of New Year's Eve (31st December)
--Average Speed on New Year's Eve: 13.244 MPH
--Speed greater than Overall Avg: 2.197 MPH
--Percentage greater than Overall Avg: + 19.88%

--The average speed on both Cristmas and New Year is higher than the overall average speed.
--However, the average speed is Highest for Christmas out of the 3 instances considered for comparison.


-- ************** END *******************